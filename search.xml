<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[装饰器]]></title>
    <url>%2F2018%2F07%2F14%2F%E8%A3%85%E9%A5%B0%E5%99%A8%2F</url>
    <content type="text"><![CDATA[装饰器 装饰器是什么？ 装饰器本质是一个高阶函数，它的作用就是扩展原有函数功能的一种函数。装饰器有个好处就是在一个函数运行前添加一些功能，并且不会影响原有函数内容。这就意味着装饰器不会修改原有函数。 在Pyhton中，@符号为装饰器函数的语法，也叫做语法糖。 简单装饰器 1234567891011121314def deco(func): #装饰器函数，接收一函数对象。 def closure(): #闭包函数 print('学习数学知识') return func() #返回接收的函数 return closure #返回闭包函数#在孩子玩之前，先让他学习。@decodef play_game(): print('开心的玩消消乐')play_game()#play_game() -&gt; deco(play_game)() 执行结果： 从结果我们可以看出孩子在玩消消乐之前先学习了数学知识。 这里的@deco 等价于 play_game = deco(play_game) 对带参数函数进行装饰 回忆一下童年~小明想要玩耍就必须做对一道数学题，只有学习了新知识才能做对。12345678910111213141516def deco(func): def deco_(a,b): print('学习简单的加法运算') a = a + 10 #在闭包函数内部对被装饰函数参数进行干预 b = b + 5 return func(a,b) #这里的a,b已经被修改 return deco_@decodef play_game(a,b): print('算一道数学题，算对了可以玩耍。&#123;&#125; + &#123;&#125; = ？'.format(a,b)) print('答案是：',( a + b)) print('开心的玩消消乐')play_game(1,2) 执行的结果并不是 3，这是因为装饰器内部的闭包函数接收到被装饰函数传入的参数后，在闭包函数内部对值进行了修改。 装饰器带参数 下面我们来简单的了解一下用带有参数的装饰器处理商城的打折问题。 12345678910111213141516171819202122232425262728293031"""商城对VIP客户实施打折方案"""def vip_sale(vip = False,sale = 1): #默认不是VIP客户 def deco(func): #装饰器函数 def deco_(money): #闭包函数 if vip: #判断是否是VIP print('尊敬的VIP客户您好，我们将会对您购买的商品进行打折优惠。') money = money * sale #打折 return func(money) else: print('办理VIP业务可享受商品折扣优惠！') return func(money) return deco_ return deco@vip_sale(vip = True,sale = 0.8)def ipad(money): print('ipad的价格是%d'% money) return money@vip_sale(vip = True,sale = 0.5)def watch(money): print('手表的价格是%d'% money) return moneyipad(3000)watch(5000) 通过例子可以看出，如果装饰器函数带参数，就需要在最外层再包裹一层函数。 这里的ipad(3000)就相当于vip_sale(True,0.8)(ipad(3000))。 装饰器的调用顺序 有时候需要给一个函数添加多个功能，一个装饰器无法完成，这时候就需要有多个装饰器来完成。 代码一：1234567891011121314151617181920212223242526272829#为了便于理解多个装饰器的调用顺序，我们就举一个非常简单的例子。#代码一def deco1(func): #装饰器函数 def deco_1(): #闭包函数 print('11111') func() print('aaaaa') return deco_1def deco2(func): #装饰器函数 def deco_2(): #闭包函数 print('22222') func() print('bbbbb') return deco_2def deco3(func): #装饰器函数 def deco_3(): #闭包函数 print('33333') func() print('ccccc') return deco_3@deco1@deco2@deco3def test(): print('test test') 这个执行结果应该不难理解。 我们在刚才的基础上稍稍修改。 代码二：123456789101112131415161718192021222324252627282930313233#代码二def deco1(func): #装饰器函数 print('这是一') def deco_1(): #闭包函数 print('11111') func() print('aaaaa') return deco_1def deco2(func): #装饰器函数 print('这是二') def deco_2(): #闭包函数 print('22222') func() print('bbbbb') return deco_2def deco3(func): #装饰器函数 print('这是三') def deco_3(): #闭包函数 print('33333') func() print('ccccc') return deco_3@deco1@deco2@deco3def test(): print('test test')test() 执行的结果为： 嗯 有点不一样了。 代码三：123456789101112131415161718192021222324252627282930#代码三def deco1(func): print('这是一') def deco_1(): func() print('aaaaa') return deco_1def deco2(func): print('这是二') def deco_2(): func() print('bbbbb') return deco_2def deco3(func): print('这是三') def deco_3(): func() print('ccccc') return deco_3@deco1@deco2@deco3def test(): print('test test')test() 结果： 多举几个例子方便理解！ 多个装饰器执行的顺序与使用 @ 语法糖声明的顺序相反 ，它是从最后一个装饰器执行到第一个装饰器，在向下执行。]]></content>
      <tags>
        <tag>装饰器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 闭包]]></title>
    <url>%2F2018%2F07%2F02%2F%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[闭包 内部函数对外部函数作用域里对象的引用(非全局变量)，则称内部函数为闭包。 闭包就是内函数运用了外函数的变量(非全局变量)，并且外函数返回值是内函数的引用。这样内部函数就叫做闭包函数。 闭包简单示例： 12345678910111213#wai是外部函数def wai(): a = 1 #nei是内部函数 def nei(): #在内函数中 用到了外函数的临时变量 print(a) #外函数的返回值是内函数的引用 return neifunc = wai()#func == neifunc() 得出结果为： 继续理解闭包： 123456789101112def outer(x): def inner(y): return x +y return inner#x :10 func = outer(10)print('function:',func)#y :15#func(15)print('result:',func(15)) inner(y)就是内部函数，对在外部作用域(非全局作用域)的变量进行引用，x就是被引用的变量，x在外部作用域outer里面(非全局作用域)，则这个内部函数inner就是一个闭包。 结果为： 简单的乌龟赛跑： 12345678910111213141516171819202122232425def outer(): p = [0] def inner(): p[0] += 1 print("乌龟位置：",p[0]) return innert1 = outer()t2 = outer()t3 = outer()tDict = &#123; 't1':t1, 't2':t2, 't3':t3,&#125;while True: msg = input('你想让哪只乌龟跑？(t1,t2,t3)') if msg in tDict: #这里的tDict[msg]只是函数的引用，调用函数需要加括号()。 tDict[msg]() if msg == 'quit': print('GAME OVER') break 以下结果：分析结果： t1的值是在原来基础上不断做累加1的操作，说明在闭包函数inner存活期间，p变量会一直存活。 t1,t2,t3之间不会相互影响。(面向对象) 闭包无法直接访问外部函数的局部变量 123456789def outer(): x = 5 def inner(): x = x + 1 #直接使用了外部函数的局部变量 return x return innerfunc = outer()func() 直接使用会报错！ 在Python3中通过nonlocal(非局部的)关键字可以解决这个问题。 12345678910def outer(): x = 5 def inner(): nonlocal x #声明x为非全局变量 x = x + 1 return x return innerfunc = outer()func() 闭包无法修改外部函数的局部变量 12345678910def outer(): x = 5 def inner(): x = 1 #无法直接修改 print('内部的x:',x) print('外部的x:',x) inner() #这里直接调用内函数 print('外部的x:',x) outer() 外部函数的变量并没有被修改。 闭包思考： 闭包私有化了变量，实现了类似于面向对象中实例的功能。 在python中，使用闭包的另一个场景就是装饰器，也叫语法糖 @ 由于闭包引用了外部函数的局部变量，则外部函数中的局部变量没有及时释放，消耗内存]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 变量基础]]></title>
    <url>%2F2018%2F06%2F14%2Fpython%20%E5%8F%98%E9%87%8F%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[变量 所谓变量就是给内存中的值取个名字方便引用。变量不仅可以是数字，还可以是任意数据类型。 变量赋值在Python中变量不需要声明大小类型，可以直接赋值使用。变量通过 = 赋值，可以把任意数据类型的值赋给变量。 同一变量可以反复赋值，哪怕更换类型。 123a = 123 #整型a = 'abc' #字符串型a = [1,2,3] #列表 在程序中可以随时修改变量的值，而Python只会记录最终修改的值。 同时可以给多个变量赋值。 123456a,b,c = 1,2,3#这样赋值的结果为：#a = 1#b = 2#c = 3 在使用变量前必须给变量赋值，变量赋值以后才会被创建。未给变量赋值而直接使用会报错。 1234a = 1bc = a + b# NameError: name 'b' is not defined Python中的变量有一个非常重要的性质：变量的赋值操作只是将变量名指向内存中的值，并不会实际复制值。它只是为数据对象取个相关的名字，名字是对象的引用而不是对象本身。你可以理解为变量是数据对象的代言人而不是其本身。 变量的命名和使用在Python中使用变量时，需要遵守一些规则。 变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。 变量名不能包含空格，但可以使用下划线来分割其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。 不要将Python关键字和函数名用作变量名，既不要使用Python用于特殊用途的单词，如print。 变量名应既简短又有描述性。例如，name比n好。student_name比s_n好，name_length 比 length_of_persons_name好。 慎用小写字母i 和大写字母O，因为它们可能被人看错成数字1和0. 变量名尽量使用小写字母。 Python关键字变量命名使用关键字会引发错误。 Python内置函数将内置函数作为变量名时，不会导致报错，但是会覆盖掉这些函数，使函数无法正常使用。]]></content>
      <categories>
        <category>python基础知识</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
