<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wu92.top/"/>
  <updated>2018-07-14T12:36:10.962Z</updated>
  <id>http://www.wu92.top/</id>
  
  <author>
    <name>WU92</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>装饰器</title>
    <link href="http://www.wu92.top/2018/07/14/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://www.wu92.top/2018/07/14/装饰器/</id>
    <published>2018-07-14T06:13:58.000Z</published>
    <updated>2018-07-14T12:36:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><blockquote><p>装饰器是什么？</p></blockquote><ul><li>装饰器本质是一个高阶函数，它的作用就是<strong>扩展原有函数功能的一种函数</strong>。装饰器有个好处就是在一个函数运行前添加一些功能，并且<strong>不会影响原有函数内容</strong>。这就意味着装饰器不会修改原有函数。</li><li>在Pyhton中，<strong>@</strong>符号为装饰器函数的语法，也叫做<strong>语法糖</strong>。</li></ul><hr><blockquote><p>简单装饰器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器函数，接收一函数对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closure</span><span class="params">()</span>:</span> <span class="comment">#闭包函数</span></span><br><span class="line">        print(<span class="string">'学习数学知识'</span>)</span><br><span class="line">        <span class="keyword">return</span> func() <span class="comment">#返回接收的函数</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> closure <span class="comment">#返回闭包函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在孩子玩之前，先让他学习。</span></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_game</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'开心的玩消消乐'</span>)</span><br><span class="line"></span><br><span class="line">play_game()</span><br><span class="line"><span class="comment">#play_game() -&gt; deco(play_game)()</span></span><br></pre></td></tr></table></figure><p>执行结果：<img src="http://pa9hh8540.bkt.clouddn.com/%E8%A3%85%E9%A5%B0%E5%99%A8.png" alt=""></p><p>从结果我们可以看出孩子在玩消消乐之前先学习了数学知识。</p><p>这里的@deco 等价于 play_game = deco(play_game)</p><a id="more"></a><hr><blockquote><p>对带参数函数进行装饰</p></blockquote><p>回忆一下童年~<br>小明想要玩耍就必须做对一道数学题，只有学习了新知识才能做对。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_</span><span class="params">(a,b)</span>:</span> </span><br><span class="line">        print(<span class="string">'学习简单的加法运算'</span>)</span><br><span class="line">        a = a + <span class="number">10</span>   <span class="comment">#在闭包函数内部对被装饰函数参数进行干预</span></span><br><span class="line">        b = b + <span class="number">5</span></span><br><span class="line">        <span class="keyword">return</span> func(a,b) <span class="comment">#这里的a,b已经被修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deco_</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_game</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(<span class="string">'算一道数学题，算对了可以玩耍。&#123;&#125; + &#123;&#125; = ？'</span>.format(a,b))</span><br><span class="line">    print(<span class="string">'答案是：'</span>,( a + b))</span><br><span class="line">    print(<span class="string">'开心的玩消消乐'</span>)</span><br><span class="line"></span><br><span class="line">play_game(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p><img src="http://pa9hh8540.bkt.clouddn.com/%E8%A2%AB%E8%A3%85%E9%A5%B0%E5%87%BD%E6%95%B0%E5%B8%A6%E5%8F%82%E6%95%B01.png" alt=""></p><p>执行的结果并不是 <code>3</code>，这是因为装饰器内部的<strong>闭包函数</strong>接收到<strong>被装饰函数</strong>传入的<strong>参数</strong>后，在<strong>闭包函数内部</strong>对值进行了<strong>修改</strong>。</p><hr><blockquote><p>装饰器带参数</p></blockquote><p>下面我们来简单的了解一下用带有<strong>参数</strong>的<strong>装饰器</strong>处理商城的打折问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">商城对VIP客户实施打折方案</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vip_sale</span><span class="params">(vip = False,sale = <span class="number">1</span>)</span>:</span> <span class="comment">#默认不是VIP客户</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">deco_</span><span class="params">(money)</span>:</span> <span class="comment">#闭包函数</span></span><br><span class="line">            <span class="keyword">if</span> vip: <span class="comment">#判断是否是VIP</span></span><br><span class="line">                print(<span class="string">'尊敬的VIP客户您好，我们将会对您购买的商品进行打折优惠。'</span>)</span><br><span class="line">                money = money * sale <span class="comment">#打折</span></span><br><span class="line">                <span class="keyword">return</span> func(money) </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'办理VIP业务可享受商品折扣优惠！'</span>)</span><br><span class="line">                <span class="keyword">return</span> func(money)</span><br><span class="line">        <span class="keyword">return</span> deco_</span><br><span class="line">    <span class="keyword">return</span> deco</span><br><span class="line"></span><br><span class="line"><span class="meta">@vip_sale(vip = True,sale = 0.8)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ipad</span><span class="params">(money)</span>:</span></span><br><span class="line">    print(<span class="string">'ipad的价格是%d'</span>% money)</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line"></span><br><span class="line"><span class="meta">@vip_sale(vip = True,sale = 0.5)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">watch</span><span class="params">(money)</span>:</span></span><br><span class="line">    print(<span class="string">'手表的价格是%d'</span>% money)</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ipad(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">watch(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p><img src="http://pa9hh8540.bkt.clouddn.com/%E8%A3%85%E9%A5%B0%E5%99%A8%E5%B8%A6%E6%9C%89%E5%8F%82%E6%95%B0-%E6%89%93%E6%8A%98.png" alt=""></p><p>通过例子可以看出，如果<strong>装饰器函数带参数</strong>，就需要在最外层再包裹一层函数。</p><p>这里的<strong>ipad(3000)</strong>就相当于<strong>vip_sale(True,0.8)(ipad(3000))</strong>。</p><hr><blockquote><p><strong>装饰器的调用顺序</strong></p></blockquote><p>有时候需要给一个函数添加多个功能，一个装饰器无法完成，这时候就需要有多个装饰器来完成。</p><p><strong><code>代码一：</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了便于理解多个装饰器的调用顺序，我们就举一个非常简单的例子。</span></span><br><span class="line"><span class="comment">#代码一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco1</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_1</span><span class="params">()</span>:</span> <span class="comment">#闭包函数</span></span><br><span class="line">        print(<span class="string">'11111'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'aaaaa'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco2</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_2</span><span class="params">()</span>:</span> <span class="comment">#闭包函数</span></span><br><span class="line">        print(<span class="string">'22222'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'bbbbb'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco3</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_3</span><span class="params">()</span>:</span> <span class="comment">#闭包函数</span></span><br><span class="line">        print(<span class="string">'33333'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'ccccc'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco1</span></span><br><span class="line"><span class="meta">@deco2</span></span><br><span class="line"><span class="meta">@deco3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'test test'</span>)</span><br></pre></td></tr></table></figure><p><img src="http://pa9hh8540.bkt.clouddn.com/%E5%A4%9A%E8%A3%85%E9%A5%B0%E5%99%A8%E8%B0%83%E7%94%A82.png" alt=""></p><p>这个执行结果应该不难理解。</p><p>我们在刚才的基础上稍稍修改。</p><p><strong><code>代码二</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代码二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco1</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器函数</span></span><br><span class="line">    print(<span class="string">'这是一'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_1</span><span class="params">()</span>:</span> <span class="comment">#闭包函数</span></span><br><span class="line">        print(<span class="string">'11111'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'aaaaa'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco2</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器函数</span></span><br><span class="line">    print(<span class="string">'这是二'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_2</span><span class="params">()</span>:</span> <span class="comment">#闭包函数</span></span><br><span class="line">        print(<span class="string">'22222'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'bbbbb'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco3</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器函数</span></span><br><span class="line">    print(<span class="string">'这是三'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_3</span><span class="params">()</span>:</span> <span class="comment">#闭包函数</span></span><br><span class="line">        print(<span class="string">'33333'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'ccccc'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco1</span></span><br><span class="line"><span class="meta">@deco2</span></span><br><span class="line"><span class="meta">@deco3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'test test'</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>执行的结果为：</p><p><img src="http://pa9hh8540.bkt.clouddn.com/%E5%A4%9A%E8%A3%85%E9%A5%B0%E5%99%A8%E9%A1%BA%E5%BA%8F3.png" alt=""></p><p><strong><code>代码三</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco1</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'这是一'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_1</span><span class="params">()</span>:</span></span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'aaaaa'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco2</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'这是二'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_2</span><span class="params">()</span>:</span></span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'bbbbb'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco3</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'这是三'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco_3</span><span class="params">()</span>:</span></span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'ccccc'</span>)</span><br><span class="line">    <span class="keyword">return</span> deco_3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco1</span></span><br><span class="line"><span class="meta">@deco2</span></span><br><span class="line"><span class="meta">@deco3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'test test'</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://pa9hh8540.bkt.clouddn.com/%E5%A4%9A%E8%A3%85%E9%A5%B0%E5%99%A84.png" alt=""></p><p>多举几个例子方便理解！</p><p>多个装饰器执行的顺序与使用 @ 语法糖声明的顺序相反 ，它是从最后一个装饰器执行到第一个装饰器，在向下执行。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;装饰器是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;装饰器本质是一个高阶函数，它的作用就是&lt;strong&gt;扩展原有函数功能的一种函数&lt;/strong&gt;。装饰器有个好处就是在一个函数运行前添加一些功能，并且&lt;strong&gt;不会影响原有函数内容&lt;/strong&gt;。这就意味着装饰器不会修改原有函数。&lt;/li&gt;
&lt;li&gt;在Pyhton中，&lt;strong&gt;@&lt;/strong&gt;符号为装饰器函数的语法，也叫做&lt;strong&gt;语法糖&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;简单装饰器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deco&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#装饰器函数，接收一函数对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#闭包函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;学习数学知识&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; func() &lt;span class=&quot;comment&quot;&gt;#返回接收的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; closure &lt;span class=&quot;comment&quot;&gt;#返回闭包函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#在孩子玩之前，先让他学习。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@deco&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play_game&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;开心的玩消消乐&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;play_game()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#play_game() -&amp;gt; deco(play_game)()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果：&lt;img src=&quot;http://pa9hh8540.bkt.clouddn.com/%E8%A3%85%E9%A5%B0%E5%99%A8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;从结果我们可以看出孩子在玩消消乐之前先学习了数学知识。&lt;/p&gt;
&lt;p&gt;这里的@deco 等价于 play_game = deco(play_game)&lt;/p&gt;
    
    </summary>
    
    
      <category term="装饰器" scheme="http://www.wu92.top/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python 闭包</title>
    <link href="http://www.wu92.top/2018/07/02/%E9%97%AD%E5%8C%85/"/>
    <id>http://www.wu92.top/2018/07/02/闭包/</id>
    <published>2018-07-02T07:42:17.000Z</published>
    <updated>2018-07-11T14:48:53.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li><p><strong>内部函数</strong>对<strong>外部函数</strong>作用域里<strong>对象</strong>的<strong>引用</strong>(非全局变量)，则称内部函数为<strong>闭包</strong>。</p></li><li><p>闭包就是<strong>内函数</strong>运用了<strong>外函数</strong>的变量(非全局变量)，并且<strong>外函数返回值是内函数的引用</strong>。这样内部函数就叫做闭包函数。</p></li></ul><blockquote><p>闭包简单示例：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#wai是外部函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wai</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">    <span class="comment">#nei是内部函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nei</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#在内函数中 用到了外函数的临时变量</span></span><br><span class="line">print(a)</span><br><span class="line">    <span class="comment">#外函数的返回值是内函数的引用</span></span><br><span class="line"><span class="keyword">return</span> nei</span><br><span class="line"></span><br><span class="line">func = wai()</span><br><span class="line"><span class="comment">#func == nei</span></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>得出结果为：<img src="http://pa9hh8540.bkt.clouddn.com/%E9%97%AD%E5%8C%85a.png" alt=""></p><a id="more"></a><blockquote><p>继续理解闭包：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x +y</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"><span class="comment">#x :10</span></span><br><span class="line">func = outer(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'function:'</span>,func)</span><br><span class="line"></span><br><span class="line"><span class="comment">#y :15</span></span><br><span class="line"><span class="comment">#func(15)</span></span><br><span class="line">print(<span class="string">'result:'</span>,func(<span class="number">15</span>))</span><br></pre></td></tr></table></figure><p><strong>inner(y)</strong>就是内部函数，对在外部作用域(非全局作用域)的变量进行引用，<strong>x</strong>就是被引用的变量，<strong>x</strong>在外部作用域<strong>outer</strong>里面(非全局作用域)，则这个内部函数<strong>inner</strong>就是一个闭包。</p><p>结果为：<img src="http://pa9hh8540.bkt.clouddn.com/%E9%97%AD%E5%8C%85func.png" alt=""></p><hr><blockquote><p>简单的乌龟赛跑：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">p = [<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">p[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">print(<span class="string">"乌龟位置："</span>,p[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">t1 = outer()</span><br><span class="line">t2 = outer()</span><br><span class="line">t3 = outer()</span><br><span class="line"></span><br><span class="line">tDict = &#123;</span><br><span class="line">    <span class="string">'t1'</span>:t1,</span><br><span class="line">    <span class="string">'t2'</span>:t2,</span><br><span class="line">    <span class="string">'t3'</span>:t3,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">msg = input(<span class="string">'你想让哪只乌龟跑？(t1,t2,t3)'</span>)</span><br><span class="line"><span class="keyword">if</span> msg <span class="keyword">in</span> tDict:</span><br><span class="line"><span class="comment">#这里的tDict[msg]只是函数的引用，调用函数需要加括号()。</span></span><br><span class="line">tDict[msg]()</span><br><span class="line"><span class="keyword">if</span> msg == <span class="string">'quit'</span>:</span><br><span class="line">print(<span class="string">'GAME OVER'</span>)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>以下结果：<img src="http://pa9hh8540.bkt.clouddn.com/%E9%97%AD%E5%8C%85-%E4%B9%8C%E9%BE%9F%E8%B5%9B%E8%B7%91.png" alt="">分析结果：</p><ul><li><p><strong>t1</strong>的值是在原来基础上不断做<strong>累加1</strong>的操作，说明在闭包函数<strong>inner</strong>存活期间，<strong>p</strong>变量会一直存活。</p></li><li><p><strong>t1</strong>,<strong>t2</strong>,<strong>t3</strong>之间不会相互影响。(面向对象)</p></li></ul><hr><blockquote><p><strong>闭包无法直接访问外部函数的局部变量</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">x = x + <span class="number">1</span> <span class="comment">#直接使用了外部函数的局部变量</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">func = outer()</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p><img src="http://pa9hh8540.bkt.clouddn.com/%E9%97%AD%E5%8C%85%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.png" alt="">直接使用会报错！</p><p>在Python3中通过nonlocal(非局部的)关键字可以解决这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> x <span class="comment">#声明x为非全局变量 </span></span><br><span class="line">x = x + <span class="number">1</span> </span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">func = outer()</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>闭包无法修改外部函数的局部变量</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">x = <span class="number">1</span> <span class="comment">#无法直接修改</span></span><br><span class="line">print(<span class="string">'内部的x:'</span>,x)</span><br><span class="line">print(<span class="string">'外部的x:'</span>,x)</span><br><span class="line">inner() <span class="comment">#这里直接调用内函数</span></span><br><span class="line">print(<span class="string">'外部的x:'</span>,x)</span><br><span class="line"></span><br><span class="line">outer()</span><br></pre></td></tr></table></figure><p> <img src="http://pa9hh8540.bkt.clouddn.com/%E9%97%AD%E5%8C%85%E6%97%A0%E6%B3%95%E4%BF%AE%E6%94%B9%E5%A4%96%E9%83%A8%E5%87%BD%E6%95%B0%E5%8F%98%E9%87%8F.png" alt=""></p><p>外部函数的变量并没有被修改。 </p><hr><blockquote><p>闭包思考：</p></blockquote><ul><li>闭包<strong>私有化</strong>了变量，实现了类似于面向对象中实例的功能。</li><li>在python中，使用闭包的另一个场景就是<strong>装饰器</strong>，也叫<strong>语法糖</strong> @</li><li>由于闭包<strong>引用</strong>了外部函数的局部变量，则<strong>外部函数</strong>中的<strong>局部变量</strong>没有及时释放，消耗内存</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;内部函数&lt;/strong&gt;对&lt;strong&gt;外部函数&lt;/strong&gt;作用域里&lt;strong&gt;对象&lt;/strong&gt;的&lt;strong&gt;引用&lt;/strong&gt;(非全局变量)，则称内部函数为&lt;strong&gt;闭包&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;闭包就是&lt;strong&gt;内函数&lt;/strong&gt;运用了&lt;strong&gt;外函数&lt;/strong&gt;的变量(非全局变量)，并且&lt;strong&gt;外函数返回值是内函数的引用&lt;/strong&gt;。这样内部函数就叫做闭包函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包简单示例：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#wai是外部函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wai&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#nei是内部函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nei&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#在内函数中 用到了外函数的临时变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#外函数的返回值是内函数的引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nei&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func = wai()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#func == nei&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得出结果为：&lt;img src=&quot;http://pa9hh8540.bkt.clouddn.com/%E9%97%AD%E5%8C%85a.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.wu92.top/categories/python/"/>
    
    
      <category term="python" scheme="http://www.wu92.top/tags/python/"/>
    
      <category term="闭包" scheme="http://www.wu92.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>python 变量基础</title>
    <link href="http://www.wu92.top/2018/06/14/python%20%E5%8F%98%E9%87%8F%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.wu92.top/2018/06/14/python 变量基础/</id>
    <published>2018-06-14T07:06:46.000Z</published>
    <updated>2018-06-14T10:43:59.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><blockquote><p>所谓变量就是给内存中的值取个名字方便引用。变量不仅可以是数字，还可以是任意数据类型。</p></blockquote><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a><strong>变量赋值</strong></h2><p>在Python中变量不需要声明大小类型，可以直接赋值使用。变量通过 <strong>= </strong>赋值，可以把任意数据类型的值赋给变量。</p><ul><li>同一变量可以反复赋值，哪怕更换类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span>  <span class="comment">#整型</span></span><br><span class="line">a = <span class="string">'abc'</span> <span class="comment">#字符串型</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">#列表</span></span><br></pre></td></tr></table></figure><p>在程序中可以随时修改变量的值，而Python只会记录最终修改的值。</p><a id="more"></a><ul><li>同时可以给多个变量赋值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这样赋值的结果为：</span></span><br><span class="line"><span class="comment">#a = 1</span></span><br><span class="line"><span class="comment">#b = 2</span></span><br><span class="line"><span class="comment">#c = 3</span></span><br></pre></td></tr></table></figure><ul><li>在使用变量前必须给变量赋值，变量赋值以后才会被创建。未给变量赋值而直接使用会报错。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b</span><br><span class="line">c = a + b</span><br><span class="line"><span class="comment"># NameError: name 'b' is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>Python中的变量有一个非常重要的性质：变量的赋值操作只是将变量名指向内存中的值，并不会实际复制值。它只是为数据对象取个相关的名字，名字是对象的引用而不是对象本身。你可以理解为变量是数据对象的代言人而不是其本身。</p></blockquote><h2 id="变量的命名和使用"><a href="#变量的命名和使用" class="headerlink" title="变量的命名和使用"></a><strong>变量的命名和使用</strong></h2><p>在Python中使用变量时，需要遵守一些规则。</p><ul><li>变量名只能包含<code>字母</code>、<code>数字</code>和<code>下划线</code>。变量名可以<code>字母</code>或<code>下划线</code>打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。</li><li>变量名不能包含空格，但可以使用下划线来分割其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。</li><li>不要将Python关键字和函数名用作变量名，既不要使用Python用于特殊用途的单词，如print。</li><li>变量名应既简短又有描述性。例如，name比n好。student_name比s_n好，name_length 比 length_of_persons_name好。</li><li>慎用小写字母i 和大写字母O，因为它们可能被人看错成数字1和0.</li><li>变量名尽量使用小写字母。</li></ul><h2 id="Python关键字"><a href="#Python关键字" class="headerlink" title="Python关键字"></a><strong>Python关键字</strong></h2><p>变量命名使用关键字会引发错误。<br><img src="http://pa9hh8540.bkt.clouddn.com/python%E5%85%B3%E9%94%AE%E5%AD%97.png" alt=""></p><h2 id="Python内置函数"><a href="#Python内置函数" class="headerlink" title="Python内置函数"></a><strong>Python内置函数</strong></h2><p>将内置函数作为变量名时，不会导致报错，但是会覆盖掉这些函数，使函数无法正常使用。<br><img src="http://pa9hh8540.bkt.clouddn.com/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓变量就是给内存中的值取个名字方便引用。变量不仅可以是数字，还可以是任意数据类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;变量赋值&quot;&gt;&lt;a href=&quot;#变量赋值&quot; class=&quot;headerlink&quot; title=&quot;变量赋值&quot;&gt;&lt;/a&gt;&lt;strong&gt;变量赋值&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在Python中变量不需要声明大小类型，可以直接赋值使用。变量通过 &lt;strong&gt;= &lt;/strong&gt;赋值，可以把任意数据类型的值赋给变量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一变量可以反复赋值，哪怕更换类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#整型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#字符串型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;#列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在程序中可以随时修改变量的值，而Python只会记录最终修改的值。&lt;/p&gt;
    
    </summary>
    
      <category term="python基础知识" scheme="http://www.wu92.top/categories/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python" scheme="http://www.wu92.top/tags/python/"/>
    
  </entry>
  
</feed>
